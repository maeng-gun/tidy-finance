---
title: "tidy-finance"
format: html
editor: visual
---

## 1. Introduction

#### 1) 패키지 로드

```{r message=FALSE, warning=FALSE}
library(tidyverse)
library(tidyquant)
library(scales)
```

#### 2) 애플 주가 티블

```{r}
prices <- tq_get("AAPL",
                 get = "stock.prices",
                 from = "2000-01-01",
                 to = "2021-12-31"
)
```

#### 3) 애플 가격 선그래프

```{r}
prices %>% 
  ggplot(aes(x=date, y=adjusted)) +
  geom_line() +
  labs(title = "2000년 이후 애플 주가")
```

#### 4) 애플 일간수익률

```{r}
returns <- prices %>% 
  arrange(date) %>%
  mutate(ret = adjusted / lag(adjusted) -1) %>% 
  select(symbol, date, ret) %>% 
  drop_na(ret)
```

#### 5) 애플 수익률 히스토그램

```{r}
quantile_0.05 <- quantile(returns %>% pull(ret), prob=.05)
returns %>% 
  ggplot(aes(x=ret))+
  geom_histogram(bins=100)+
  geom_vline(xintercept = quantile_0.05, 
             linetype="dashed")+
  scale_x_continuous(labels=percent)
```

#### 6) 요약통계량

```{r}
returns %>% 
  group_by(year=year(date)) %>% 
  summarise(across(
    ret,
    list(mean=mean, sd=sd, max=max, min=min),
    .names = "{.fn}_ret"
  ))
```

#### 7) DOW 지수 구성종목들의 수익률 티블

```{r message=FALSE, warning=FALSE}
index_prices <- 
  tq_index('DOW') %>% 
  tq_get(get = "stock.prices",
         from = "2000-01-01",
         to = "2021-12-31")

index_prices <- readRDS('data/index_prices.Rdata')

index_prices <- 
  index_prices %>% 
  group_by(symbol) %>% 
  mutate(n = n()) %>% 
  ungroup(symbol) %>% 
  filter(n == max(n)) %>% 
  select(-n)

returns <- index_prices |>
  mutate(month = floor_date(date, "month")) |>
  group_by(symbol, month) |>
  summarize(price = last(adjusted), .groups = "drop_last") |>
  mutate(ret = price / lag(price) - 1) |>
  drop_na(ret) |>
  select(-price)
```

#### 8) 수익률 행렬(행-날짜, 열-종목, 값-수익률)

```{r}
returns_matrix <- returns %>% 
  pivot_wider(
    names_from = symbol,
    values_from = ret
  ) %>% 
  select(-month)
```

#### 9) 최소분산 포트폴리오(MVP) 산출

```{r paged.print=TRUE}
sigma <- cov(returns_matrix)
mu <- colMeans(returns_matrix)
N <- ncol(returns_matrix)
iota <- rep(1, N)
sigma_inv <- solve(sigma)

mvp_weights <- sigma_inv %*% iota
mvp_weights <- mvp_weights / sum(mvp_weights)

mvp_r_v <- tibble(
  average_ret = as.numeric(t(mvp_weights) %*% mu),
  volatility = as.numeric(sqrt(t(mvp_weights) %*% sigma %*% mvp_weights))
)
mvp_r_v
```

#### 10) 효율적 프론티어 생성

```{r}
benchmark_multiple <- 3
mu_bar <- benchmark_multiple * mvp_r_v$average_ret

C <- as.numeric(t(iota) %*% sigma_inv %*% iota)
D <- as.numeric(t(iota) %*% sigma_inv %*% mu)
E <- as.numeric(t(mu) %*% sigma_inv %*% mu)
lambda_tilde <- as.numeric(2 * (mu_bar - D / C) / (E - D^2 / C))
efp_weights <- mvp_weights +
  lambda_tilde / 2 * (sigma_inv %*% mu - D * mvp_weights)

length_year <- 12
a <- seq(from = -0.4, to = 1.9, by = 0.01)

res <- tibble(
  a = a,
  mu = NA,
  sd = NA
)
for (i in seq_along(a)) {
  w <- (1 - a[i]) * mvp_weights + (a[i]) * efp_weights
  res$mu[i] <- length_year * t(w) %*% mu   
  res$sd[i] <- sqrt(length_year) * sqrt(t(w) %*% sigma %*% w)
}


res |>
  ggplot(aes(x = sd, y = mu)) +
  geom_point() +
  geom_point(
    data = res |> filter(a %in% c(0, 1)),
    size = 4
  ) +
  geom_point(
    data = tibble(
      mu = length_year * mu,       
      sd = sqrt(length_year) * sqrt(diag(sigma))
    ),
    aes(y = mu, x = sd), size = 1
  ) +
  labs(
    x = "Annualized standard deviation",
    y = "Annualized expected return",
    title = "Efficient frontier for DOW index constituents"
  ) +
  scale_x_continuous(labels = percent) +
  scale_y_continuous(labels = percent)
```

## 2. Data Management

#### 1) 패키지 로드 & 날짜 지정

```{r message=FALSE, warning=FALSE}
library(frenchdata)
library(tidyverse)
library(tidyquant)
library(scales)
library(readxl)
library(googledrive)
library(RSQLite)
library(dbplyr)

start_date <- ymd("1960-01-01")
end_date <- ymd("2021-12-31")
```

#### 2) 파마-프렌치 3팩터 자료

```{r message=FALSE}

factors_ff_monthly_raw <- download_french_data("Fama/French 3 Factors")

factors_ff_monthly <-
  factors_ff_monthly_raw$subsets$data[[1]] |>
  transmute(
    month = floor_date(ymd(str_c(date, "01")), "month"),
    rf = as.numeric(RF) / 100,
    mkt_excess = as.numeric(`Mkt-RF`) / 100,
    smb = as.numeric(SMB) / 100,
    hml = as.numeric(HML) / 100
  ) |>
  filter(month >= start_date & month <= end_date)

factors_ff_daily_raw <- download_french_data("Fama/French 3 Factors [Daily]")

factors_ff_daily <-
  factors_ff_daily_raw$subsets$data[[1]] |>
  transmute(
    date = ymd(date),
    rf = as.numeric(RF) / 100,
    mkt_excess = as.numeric(`Mkt-RF`) / 100,
    smb = as.numeric(SMB) / 100,
    hml = as.numeric(HML) / 100
  ) |>
  filter(date >= start_date & date <= end_date)

industries_ff_monthly_raw <-
  download_french_data("10 Industry Portfolios")

industries_ff_monthly <-
  industries_ff_monthly_raw$subsets$data[[1]] |>
  mutate(month = floor_date(ymd(str_c(date, "01")), "month")) |>
  mutate(across(where(is.numeric), ~ . / 100)) |>
  select(month, everything(), -date) |>
  filter(month >= start_date & month <= end_date)
```

#### 3) Hou, Xue, and Zhang(2014) q-팩터

```{r message=FALSE, warning=FALSE}
factors_q_monthly_link <-
  "http://global-q.org/uploads/1/2/2/6/122679606/q5_factors_monthly_2021.csv"

factors_q_monthly <- 
  read_csv(factors_q_monthly_link) |>
  mutate(month = ymd(str_c(year, month, "01", sep = "-"))) |>
  select(-R_F, -R_MKT, -year) |>
  rename_with(~ str_remove(., "R_")) |>
  rename_with(~ str_to_lower(.)) |>
  mutate(across(-month, ~ . / 100)) |>
  filter(month >= start_date & month <= end_date)
```

#### 4) Welch and Goyal(2008) 거시경제 예측변수(구글드라이브 자료)

```{r}
macro_predictors_link <-
  "https://docs.google.com/spreadsheets/d/1OArfD2Wv9IvGoLkJ8JyoXS0YMQLDZfY2"

drive_download(
  macro_predictors_link,
  path = "data/macro_predictors.xlsx"
)

macro_predictors <- read_xlsx(
  "data/macro_predictors.xlsx",
  sheet = "Monthly"
) |>
  mutate(month = ym(yyyymm)) |>
  mutate(across(where(is.character), as.numeric)) |>
  mutate(
    IndexDiv = Index + D12,
    logret = log(IndexDiv) - log(lag(IndexDiv)),
    Rfree = log(Rfree + 1),
    rp_div = lead(logret - Rfree, 1), # Future excess market return
    dp = log(D12) - log(Index), # Dividend Price ratio
    dy = log(D12) - log(lag(Index)), # Dividend yield
    ep = log(E12) - log(Index), # Earnings price ratio
    de = log(D12) - log(E12), # Dividend payout ratio
    tms = lty - tbl, # Term spread
    dfy = BAA - AAA # Default yield spread
  ) |>
  select(month, rp_div, dp, dy, ep, de, svar,
         bm = `b/m`, ntis, tbl, lty, ltr,
         tms, dfy, infl
  ) |>
  filter(month >= start_date & month <= end_date) |>
  drop_na()
```

#### 5) FRED 데이터

```{r}
cpi_monthly <- tq_get("CPIAUCNS",
                      get = "economic.data",
                      from = start_date,
                      to = end_date
) |>
  transmute(
    month = floor_date(date, "month"),
    cpi = price / price[month == max(month)]
  )
```

#### 6) SQLite DB

```{r}
tidy_finance <- dbConnect(
  SQLite(),
  "data/tidy_finance.sqlite",
  extended_types = TRUE
)

dbWriteTable(tidy_finance,
  "factors_ff_monthly",
  value = factors_ff_monthly,
  overwrite = TRUE
)
  dbWriteTable(tidy_finance,
  "factors_ff_daily",
  value = factors_ff_daily,
  overwrite = TRUE
)

dbWriteTable(tidy_finance,
  "industries_ff_monthly",
  value = industries_ff_monthly,
  overwrite = TRUE
)

dbWriteTable(tidy_finance,
  "factors_q_monthly",
  value = factors_q_monthly,
  overwrite = TRUE
)

dbWriteTable(tidy_finance,
  "macro_predictors",
  value = macro_predictors,
  overwrite = TRUE
)

dbWriteTable(tidy_finance,
  "cpi_monthly",
  value = cpi_monthly,
  overwrite = TRUE
)
```

-   DB 내 테이블 이름 확인

```{r}
dbListTables(tidy_finance)
```

## **3. WRDS, CRSP, and Compustat**

#### 1) WRDS 데이터베이스 연결하기

```{r}
library(tidyverse)
library(scales)
library(RSQLite)
library(dbplyr)
library(RPostgres)
library(yaml)

id_pw <- yaml.load_file('id_pw.yaml')

wrds <- dbConnect(
  Postgres(),
  host = "wrds-pgdata.wharton.upenn.edu",
  dbname = "wrds",
  port = 9737,
  sslmode = "require",
  user = id_pw$user,
  password = id_pw$password
)

start_date <- ymd("2000-01-01")
end_date <- ymd("2021-12-31")
```

-   ddd

```{r}
msf_db <- tbl(wrds, in_schema("crsp", "msf"))

msenames_db <- tbl(wrds, in_schema("crsp", "msenames"))

msedelist_db <- tbl(wrds, in_schema("crsp", "msedelist"))

crsp_monthly <- 
  msf_db |>
  filter(date >= start_date & date <= end_date) |>
  inner_join(
    msenames_db |>
      filter(shrcd %in% c(10, 11)) |>
      select(permno, exchcd, siccd, namedt, nameendt),
    by = c("permno")
  ) |>
  filter(date >= namedt & date <= nameendt) |>
  mutate(month = floor_date(date, "month")) |>
  left_join(
    msedelist_db |>
      select(permno, dlstdt, dlret, dlstcd) |>
      mutate(month = floor_date(dlstdt, "month")),
    by = c("permno", "month")
  ) |>
  select(
    permno, # Security identifier
    date, # Date of the observation
    month, # Month of the observation
    ret, # Return
    shrout, # Shares outstanding (in thousands)
    altprc, # Last traded price in a month
    exchcd, # Exchange code
    siccd, # Industry code
    dlret, # Delisting return
    dlstcd # Delisting code
  ) |>
  collect() |>
  mutate(
    month = ymd(month),
    shrout = shrout * 1000
  )

crsp_monthly
```

## **4. TRACE and FISD**

#### 1)

## **5. Beta Estimation**

#### 1)
